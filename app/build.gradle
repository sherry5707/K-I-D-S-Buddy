apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao' // apply plugin

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.kinstalk.her.qchat"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
//        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        ndk {
            abiFilters "armeabi"
        }
        lintOptions {
            checkReleaseBuilds false
            // Or, if you prefer, you can continue to check for errors in release builds,
            // but continue the build even when errors are found:
            abortOnError false
        }
//
//        packagingOptions {
//            exclude "lib/arm64-v8a/libimagepipeline.so"
//            exclude "lib/armeabi-v7a/libimagepipeline.so"
//            exclude "lib/x86/libimagepipeline.so"
//            exclude "lib/x86_64/libimagepipeline.so"
//        }
        //配置自定义打包名称
        /*applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                def fileName
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    if (variant.buildType.name.equals('release')) {
                        variant.mergedFlavor.versionName = rootProject.ext.versionName
                        fileName = "QChat_${variant.mergedFlavor.versionName}_release.apk"
                    } else if (variant.buildType.name.equals('debug')) {
                        variant.mergedFlavor.versionName = rootProject.ext.versionName + rootProject.ext.debugVersionSuffix
                        fileName = "QChat_${variant.mergedFlavor.versionName}_debug.apk"
                    }
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }*/
        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def outputFile = output.outputFile
                def fileName
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    if (variant.buildType.name.equals('release')) {
                        variant.mergedFlavor.versionName = rootProject.ext.versionName
                        fileName = "QChat_${variant.mergedFlavor.versionName}_release.apk"
                    } else if (variant.buildType.name.equals('debug')) {
                        variant.mergedFlavor.versionName = rootProject.ext.versionName + rootProject.ext.debugVersionSuffix
                        fileName = "QChat_${variant.mergedFlavor.versionName}_debug.apk"
                    }
                    outputFileName = fileName
                }
            }
        }

    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            //jni.srcDirs = []
        }
    }


    buildscript {
        repositories {
            maven {
                url "http://dl.bintray.com/countly/maven"
            }

        }
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
        maxProcessCount 4 // this is the default value
    }

    //签名使用的相关证书
    signingConfigs {
        debug {
            storeFile file("../magellan_debug.keystore")
            storePassword "android"
//            keyAlias "androiddebugkey"
            keyAlias "magellan_debugkey"
            keyPassword "android"

        }
        release {
            storeFile file("../aicore_platform.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        debug {
            buildConfigField("boolean", "IS_RELEASE", "false")

            // 是否开启混淆
            minifyEnabled false
            zipAlignEnabled false
            // 去除无用的resource文件
            shrinkResources false
            // 加载混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.debug
        }
        release {
            buildConfigField("boolean", "IS_RELEASE", "true")
            // 是否开启混淆
            minifyEnabled false
            zipAlignEnabled true
            // 去除无用的resource文件
            shrinkResources false
            // 加载混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
    }

    greendao{
        schemaVersion 2
        daoPackage 'com.kinstalk.her.qchat.gen'
        targetGenDir 'src/main/java'
    }

}

dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation project(':qchatapi')
    implementation project(':qchatcomm')
    implementation project(':qchatmodel')
    implementation project(':chatkit')
    compile 'com.tencent.tac:tac-core:1.2.+'
    compile 'com.tencent.tac:tac-messaging:1.2.+'
    implementation 'io.github.rockerhieu:emojicon:1.4.1'
    implementation 'kinstalk.com.countly:kinstalkcountly:+'

//    compile project(':xgpush')
    testImplementation 'junit:junit:4.12'

    implementation 'org.greenrobot:greendao:3.2.2' // add library
    // 在文件最后使用插件
    apply plugin: 'com.tencent.tac.services'

    compile 'com.android.support:design:25.1.1'
    implementation 'com.android.support:cardview-v7:25.1.1'
    provided 'com.kinstalk.common:kinstalk-common:+'

    implementation 'de.hdodenhof:circleimageview:2.2.0'
}
